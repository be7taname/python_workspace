'''
Created on Sep 6, 2015

@author: mianmianba
'''
class NodeLocation(object):
    def __init__(self, level=None, offset=None):
        self.level = level
        self.offset = offset
        
    def toIndex(self):
        return (1 << self.level) + self.offset

# Definition for a  binary tree node
class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None
        
    def setIndex(self, index): self.index = index
        
    def insertNode(self, index):
        """
        :type index: int
        :rtype: TreeNode
        """
        loc = index2Location(index)
        prevLoc = NodeLocation(loc.level-1, loc.offset>>1)
        parentNode = self.obtainNode(prevLoc.toIndex());
        
        if parentNode == None: return None
        
        if (loc.offset & 1) == 0:
            parentNode.left = TreeNode()
            parentNode.left.setIndex(index)
            return parentNode.left
        else:
            parentNode.right = TreeNode()
            parentNode.right.setIndex(index)
            return parentNode.right
            
    def obtainNode(self, index):
        """
        :type index: int
        :rtype: TreeNode
        """
        tmp = self
        loc = index2Location(index)
        for i in range(loc.level-1, -1, -1):
            thisBit = (loc.offset >> i) & 1
            if thisBit == 0:
                tmp = tmp.left
            else:
                tmp = tmp.right
            if tmp == None: return None
        return tmp
        
def index2Location(index):
    """
    :type index: int
    :rtype: NodeLocation
    """
    loc = NodeLocation()
    for level in range(1, 31):
        delimit = 1 << level
        if index < delimit:
            break
    loc.level = level - 1
    loc.offset = index - (1 << loc.level)
    return loc
        
def genTree(self, indexList, valueList):
    """
    :type indexList: List[int]
    :type valueList: List[int]
    :rtype: TreeNode 
    """
    root = TreeNode()
    root.setIndex(1)
    sorted(range(indexList), key=lambda k: indexList[k])
    return root

        