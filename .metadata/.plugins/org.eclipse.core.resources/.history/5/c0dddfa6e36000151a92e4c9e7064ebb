'''
Created on Sep 20, 2015

@author: mianmianba
'''

class NumDecodings(object):
    def solutionDP(self, s):
        """
        :type s: str
        :rtype: int
        """
        if len(s) == 0: return 0
        numDec = [0] * len(s)
        cnt = 0
        for cc in s:
            if cc == '0':
                if cb == '1' or cb == '2':
                    numDec[cnt] = numDec[cnt - 2]
                    numDec[cnt - 1] = 0 
                else:
                    return 0
            elif cc > '0' and cc <= '6':
                if cb == '0' or cb >= '3':
                    numDec[cnt] = numDec[cnt-1]
                else:
                    numDec[cnt] = numDec[cnt-1] + numDec[cnt-2]
            elif cc > '6':
                if cb == '0' or cb >= '2':
                    numDec[cnt] = numDec[cnt-1]
                else:
                    numDec[cnt] = numDec[cnt-1] + numDec[cnt-2]
                
            cnt += 1
                    
        
        
    def solution(self, s):
        """
        :type s: str
        :rtype: int
        """
        if len(s) == 0: return 0
        elif len(s) == 1: 
            if s == '0': return 0
            else: return 1
        elif len(s) == 2:
            if s[0] == '0': return 0
            elif s[1] == '0' and s[0] <= '2': return 1
            elif s[1] == '0' and s[0] > '2': return 0
            elif s[0] == '1' or (s[0] == '2' and (s[1] >= '0' and s[1] <= '6')):
                return 2
            else:
                return 1
        else:
            if s[-2] == '0' and s[-1] > '0': return self.solution(s[:-1])
            elif s[-2] == '0' and s[-1] == '0': return 0
            elif s[-1] == '0': return self.solution(s[:-2])
            elif s[-2] == '1' or (s[-2] == '2' and (s[-1] >= '0' and s[-1] <= '6')):
                return self.solution(s[:-2])*2
            else:
                return self.solution(s[:-2])
                        