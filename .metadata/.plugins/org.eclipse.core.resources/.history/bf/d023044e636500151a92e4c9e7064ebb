'''
Created on Sep 27, 2015

@author: mianmianba
'''

class IsValidBST(object):
    def solutions(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if root == None: return True
        if root.left == None and root.right == None:
            return True
        if root.left != None:
            leftMax = self.MaxOrInvalid(root.left)
            if leftMax == -1: return False
            if leftMax >= root.val: return False
        if root.right != None:
            rightMax = self.MaxOrInvalid(root.right)
            if rightMax == -1: return False
            if rightMax <= root.val: return False
        return True
        
    def MaxOrInvalid(self, root, flag):
        if root.left == None and root.right == None:
            return root.val
        if root.left != None:
            leftMax = self.MaxOrInvalid(root.left, 0)
            if leftMax == -1: return -1
            if leftMax > root.val: return -1
        if root.right != None:
            rightMax = self.MaxOrInvalid(root.right)
            if rightMax == -1: return -1
            if rightMax < root.val: return -1
            else: return rightMax
        return root.val
        