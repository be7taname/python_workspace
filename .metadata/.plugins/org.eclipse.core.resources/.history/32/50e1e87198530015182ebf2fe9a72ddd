'''
Created on Sep 4, 2015

@author: mianmianba
'''
class NumIslands(object):
    def visitIsland(self, grid, visited, rowId, colId):
        numRow = len(grid)
        numCol = len(grid[0])
        visited[rowId][colId] = True
        if (rowId+1)<numRow and grid[rowId+1][colId] == '1' and visited[rowId+1][colId] == False:
            self.visitIsland(grid, visited, rowId+1, colId)
        if (rowId-1)>=0 and grid[rowId-1][colId] == '1' and visited[rowId-1][colId] == False:
            self.visitIsland(grid, visited, rowId-1, colId)
        if (colId+1)<numCol and grid[rowId][colId+1] == '1' and visited[rowId][colId+1] == False:
            self.visitIsland(grid, visited, rowId, colId+1)
            
    def solution(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        numRow = len(grid)
        numCol = len(grid[0])
        visited = [[False for x in range(numCol)] for x in range(numRow)]
        for i in xrange(numRow):
            for j in xrange(numCol):
                self.visitIsland(grid, visited, i, j)
                
