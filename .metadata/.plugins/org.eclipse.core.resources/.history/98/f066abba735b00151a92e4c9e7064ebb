'''
Created on Sep 14, 2015

@author: mianmianba
'''

class FractionToDecimal(object):
    def solution(self, numerator, denominator):
        """
        :type numerator: int
        :type denominator: int
        :rtype: str
        """
        if numerator * denominator < 0:
            pos = False
        else:
            pos = True
        numerator = abs(numerator)
        denominator = abs(denominator)
         
        maxlen=1000
        mod = []
        if numerator == 0 or denominator == 0:
            return "0"
        res = []
        l = -1
        while len(mod) < maxlen:
            res.append(numerator/denominator)
            m = numerator % denominator
            if m == 0:
                break
            if m in mod:
                l = mod.index(m)
                break
            else:
                mod.append(m)
                numerator = m * 10
         
        if len(res) == 1:
            s = str(res[0])
        else:
            s = str(res[0]) + "."
            if l == -1:
                s = s + "".join([str(n) for n in res[1::]] )
            else:
                s = s+ "".join([str(n) for n in res[1:l+1]]) + "(" + "".join([str(n) for n in res[l+1::]]) + ")"
        if pos:
            return s
        else:
            return "-"+s
#         if denominator < 0: 
#             denominator = -denominator
#             numerator = -numerator
#         if numerator < 0:
#             numerator = -numerator
#             sign = -1
#         else:
#             sign = 1
#         intPart = numerator / denominator
#         remainder = numerator - denominator * intPart
#         if remainder == 0: return str(sign*intPart)
#         # remVisited = [0] * denominator
#         remVisited = set()
#         fracPart = 0
#         rep = 0
#         while remainder != 0:
#             newFrac = remainder * 10 / denominator
#             remainder = remainder * 10 - newFrac * denominator
#             if remainder not in remVisited: remVisited.add(remainder)
#             else:
#                 rep = 1
#                 break 
#             fracPart = fracPart * 10 + newFrac
#         if rep == 0:
#             return '{}.{}'.format(sign*intPart, fracPart)
#         else:
#             return '{}.({})'.format(sign*intPart, fracPart)
            
            
            
            